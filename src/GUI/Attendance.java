/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import database.db;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import model.LoggingAndFeedbackHelper;
import model.ErrorReporter;

/**
 *
 * @author Rajitha Yasasri
 */
public class Attendance extends javax.swing.JInternalFrame {

    /**
     * Creates new form Attendance
     */
    public Attendance() {
        initComponents();
        jDateChooser1.setDate(new Date());
        loadAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Attendance");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/logo.png"))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Search"));

        jLabel1.setText("Date:");

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Employee id", "Name" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Employee id", "Name", "Clock in", "Clock out"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jTable1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTable1InputMethodTextChanged(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Load All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Save Clock In");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Save Clock Out");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            jTable1.print();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadAll();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        search();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        search();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {

            TableCellEditor cellEditor = jTable1.getCellEditor();
            if (cellEditor != null) {
                cellEditor.stopCellEditing();
            }

            String clockOut = jTable1.getValueAt(selectedRow, 3).toString();
            try {
// validate time
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm");
                Date parse = sdf.parse(clockOut);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please provide a clock out time in valid format (hh:mm).", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //check whether the clock in time is present
            String clockIn = jTable1.getValueAt(selectedRow, 2).toString();

            if (clockIn.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please provide clock in time before inserting clock out time", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // save 
            try {

                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");

                String today = sdf1.format(new Date());

                String empId = jTable1.getValueAt(selectedRow, 0).toString();

                String dateTime = today + " " + clockOut;

                db.iud("UPDATE attendance SET clock_out='" + dateTime + "' WHERE employee_idemployee='" + empId + "' AND date='" + today + "' ");

                LoggingAndFeedbackHelper.successfulInsert("Clock out time of employee " + empId + " was added", this);

            } catch (Exception e) {
                ErrorReporter.reportError(e);
                JOptionPane.showMessageDialog(this, "An Error has occurred. Please recheck the format of the clock out time", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        checkCellValue();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange

        Date today = new Date();

        if (jDateChooser1.getDate().after(today)) {
            JOptionPane.showMessageDialog(this, "Cannot mark or view attendance for dates after today", "Error", JOptionPane.ERROR_MESSAGE);
            jDateChooser1.setDate(today);
            return;
        } else {
            loadAll();
        }

    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {

            TableCellEditor cellEditor = jTable1.getCellEditor();
            if (cellEditor != null) {
                cellEditor.stopCellEditing();
            }

            String clockIn = jTable1.getValueAt(selectedRow, 2).toString();
            try {
// validate time
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm");
                Date parse = sdf.parse(clockIn);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please provide a clock in time in valid format (hh:mm).", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // save 
            try {

                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");

                String today = sdf1.format(new Date());

                String empId = jTable1.getValueAt(selectedRow, 0).toString();

                String dateTime = today + " " + clockIn;

                db.iud("INSERT INTO attendance (clock_in,date,employee_idemployee) VALUES ('" + dateTime + "','" + today + "','" + empId + "')");

                LoggingAndFeedbackHelper.successfulInsert("Clock in time of employee " + empId + " was added", this);

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "An Error has occurred. Please recheck the format of the clock in time", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable1InputMethodTextChanged

    }//GEN-LAST:event_jTable1InputMethodTextChanged

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange

    }//GEN-LAST:event_jTable1PropertyChange

    private void jTable1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable1CaretPositionChanged

    }//GEN-LAST:event_jTable1CaretPositionChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
private void loadAll() {

        try {
            ResultSet employeeSearch = db.search("SELECT idemployee,fname,lname FROM employee WHERE status=1 ORDER BY idemployee ASC");
            jTextField1.setText(null);
            loadTable(employeeSearch);
        } catch (Exception e) {
            ErrorReporter.reportError(e);
        }
    }

    private void loadTable(ResultSet employeeSearch) {

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        try {

            Date dateChooserDate = jDateChooser1.getDate();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String dateString = sdf.format(dateChooserDate);

            // loading employees
            while (employeeSearch.next()) {

                Vector v = new Vector();

                String idEmployee = employeeSearch.getString("idemployee");

                v.add(idEmployee);
                v.add(employeeSearch.getString("fname") + " " + employeeSearch.getString("lname"));
                v.add("");
                v.add("");
                dtm.addRow(v);
            }
            // loading attendance
            ResultSet attendanceSearch = db.search("SELECT idemployee,clock_in,clock_out FROM attendance a INNER JOIN employee e ON e.idemployee=a.employee_idemployee WHERE status=1 AND date='" + dateString + "' ORDER BY idemployee ASC");

            if (attendanceSearch.next()) {

                int rowCount = jTable1.getRowCount();
                for (int i = 0; i < rowCount; i++) {
                    String empId = jTable1.getValueAt(i, 0).toString();

                    if (empId.equals(attendanceSearch.getString("idemployee"))) {
                        jTable1.setValueAt(attendanceSearch.getString("clock_in"), i, 2);
                        jTable1.setValueAt(attendanceSearch.getString("clock_out"), i, 3);

                        attendanceSearch.next();
                    }

                }
            }
            //enable and disable table for input
            String toDayString = sdf.format(new Date());

            if (toDayString.equals(dateString)) {
                jTable1.setEnabled(true);
            } else {
                TableCellEditor cellEditor = jTable1.getCellEditor();
                if (cellEditor != null) {
                    cellEditor.cancelCellEditing();
                }

                jTable1.setEnabled(false);
            }

            jTable1.selectAll();// to prevent editing rows at first place
        } catch (Exception e) {
            ErrorReporter.reportError(e);
        }
    }

    private void search() {
        String text = jTextField1.getText();

        if (!text.isEmpty()) {

            try {
                int selectedIndex = jComboBox1.getSelectedIndex();

                String query = "";
                if (selectedIndex == 0) {
                    query = "SELECT idemployee,fname,lname FROM employee WHERE status=1 AND idemployee='" + text + "' ORDER BY idemployee ASC";
                } else {
                    query = "SELECT idemployee,fname,lname FROM employee WHERE status=1 AND (fname LIKE '%" + text + "%' OR lname LIKE '%" + text + "%' ) ORDER BY idemployee ASC";
                }
                ResultSet search = db.search(query);
                loadTable(search);
            } catch (Exception e) {
                ErrorReporter.reportError(e);
            }

        }
    }

    private void checkCellValue() {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            int selectedColumn = jTable1.getSelectedColumn();

            if (selectedColumn == 2) {
                String clock_in = jTable1.getValueAt(selectedRow, 2).toString();

                if (clock_in.isEmpty()) {
                    //nothing to do
                } else {
                    JOptionPane.showMessageDialog(this, "Cannot edit already added attendance", "Error", JOptionPane.ERROR_MESSAGE);

                    TableCellEditor cellEditor = jTable1.getCellEditor();
                    if (cellEditor != null) {
                        cellEditor.cancelCellEditing();
                    }
                }
            }

            if (selectedColumn == 3) {
                String clock_out = jTable1.getValueAt(selectedRow, 3).toString();

                if (clock_out.isEmpty()) {
                    //nothing to do
                } else {
                    JOptionPane.showMessageDialog(this, "Cannot edit already added attendance", "Error", JOptionPane.ERROR_MESSAGE);

                    TableCellEditor cellEditor = jTable1.getCellEditor();
                    if (cellEditor != null) {
                        cellEditor.cancelCellEditing();
                    }
                }
            }
        }
    }
}
